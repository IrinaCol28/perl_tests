#!/usr/bin/perl
use strict;
use warnings;
use diagnostics;

# Напишите программу, которая принимала бы из командной строки список файлов 
# и отбирала бы с помощью оператора grep те из них, раз- мер которых не превышает 1000 байт. 
# Воспользуйтесь оператором map, чтобы перед каждым полученным в 
# результате именем файла вставить четыре пробела и символ перевода строки после имени. 
# Выведите получившийся список.

print map { "$_\n" } grep { -s ($_) < 1000 } @ARGV;
print map { "$_\n" } grep { -s ($_) > 1000 } @ARGV;
print map { "$_\n" } grep { -s ($_) > 68608 } @ARGV;
print map { "$_\n" } grep { -s ($_) < 68608 } @ARGV;


# Напишите программу, которая просила бы пользователя ввести шаблон (регулярное выражение). 
# Строка должна вводиться с клавиатуры, а не приниматься в виде аргумента командной строки.
# Из заранее оп- ределенного каталога (например, /etc или c: \\windows) выведите список файлов,
# чьи имена совпадают с введенным шаблоном. 
# Программа должна продолжать работу до тех пор, пока пользователь не введет в качестве шаблона пустую строку. 
# Пользователь не должен вводить символы слэша, которые в Perl традиционно служат для разграниче- ния шаблонов. 
# Вводимые шаблоны должны разделяться символом пе- ревода строки. Постарайтесь обеспечить устойчивость программы
#  к ошибкам в шаблонах, таким как отсутствие парных скобок.

while(1){
  chomp(my $regex=<STDIN>);
  last unless ( defined $regex && length $regex );
  print map {"  $_\n" } grep { eval {/$regex/} } glob ( ".* *" );
}
  

